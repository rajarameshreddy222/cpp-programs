#include<iostream>
using namespace std;
int count=0;
struct node
{
	int data ;
	node *next;
};
class linkedlist
{
	node *head,*tail;
	public:
		linkedlist()
		{
			head=NULL;
			tail=NULL;
		}
	  void createnewnode(int value)
	  {
	  	node *temp=new node;
	  	temp->data=value;
	  	temp->next=NULL;
	  	if(head==NULL)
	  	{
	  		head=temp;
	  		tail=temp;
	  		temp=NULL;
	 
		  }
		  else  
		  {
		  	tail->next=temp;
		  	tail=temp;
		  }		
		  count++;
	  }
	void createstart(int value)
	  {
	  node *temp=new node;
	  	temp->data=value;
	  	temp->next=NULL;
	  	temp->next=head;
	  	head=temp;
	  	count++;
	  }
	  void createlast(int value)
	  {
	  	node *temp=new node;
	  	temp->data=value;
	  	temp->next=NULL;
	  	tail->next=temp;
	  	tail=temp;
		count++;
      }  
	  void createindex(int value, int i)
	  {
	  	
	  	node *cur=new node;
	  	node *pre=new node;
	  	cur=head;
	  	for(i=1;i<3;i++)
	  	{
	  		pre=cur;
	  		cur=cur->next;
		  }
		  node *temp=new node;
	  	temp->data=value;
	  	temp->next=cur;
	  	pre->next=temp;
		  
	  	count++;
	  }
	  void deletefirst()
	  {
	  	node *temp= new node;
	  temp=head;
	  head=head->next;
	  delete temp;
	  count--;
	  }
	  void deletelast()
	  {
	  node *cur=new node;
                node *pre=new node;
                  
                   cur=head;
    while(cur->next!=NULL)
             {
              pre=cur;
              cur=cur->next;
			  }
              pre->next=NULL;
              pre=tail;
              delete cur;
              count--;
	  
	  }
	  
	  
	  void display()
	  {
	  	node *temp=new node;
	  	temp=head;
	  	while(temp!=NULL)
		  {
		
		  	cout<<temp->data<<"\t";
		  	temp=temp->next;
		  	
		  }	cout<<"no of nodes: "<<count; 
}	  
};

int main()
{ 
linkedlist l;
l.createnewnode(90);
l.createnewnode(100);
l.createnewnode(120);
l.createstart(30);
l.createstart(45);
l.createlast(780);
l.createindex(60,3);
l.deletefirst();
l.deletelast();
l.display();
	return 0;
}
=========================
