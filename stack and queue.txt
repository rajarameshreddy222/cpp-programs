 QUEUE 
==========
queue arry:-
#include<iostream>
using namespace std;
int top=-1,arr[6],i;
void display()
{ 
	
	for(i=0;i<=top;i++)
	{
		cout<<arr[i]<<"\t";
	}
	cout<<"\n";
    
}
void insert()
{
	int value;
	cout<<"enter value";
	cin>>value;
	if(top==6-1)
	{
		cout<<"stact is full";
	}
	else
	{
		top++;
		arr[top]=value;
	}
}
void delete1()
{
 for(int i=0;i<=top;i++)
 {
 	arr[i]=arr[i+1];
 }
 top--;

}	
void queue()
{
	int opt;
	cout<<"1.insert\n";
	cout<<"2.delete\n";
	cout<<"0.exit\n";
	do
	{
		cout<<"ENTER OPTION";
		cin>>opt;
		if(opt==1)
		{
		   insert();
	        if(top==6-1)
            display();
		}
		else if(opt==2)
		{
			delete1();
			display();
		}
	}
	while(opt!=0);
}
int main()
{
	queue();
	//display();
}
     ==============================
node
====
#include<iostream>
using namespace std;
struct node
{ int data;
  node *next;
};
class queue
{
	node *first,*last;
	public:
		queue()
		{
		 first=NULL;
		 last=NULL;			
		}
void createnode(int value )
{ 
	node *temp=new node;
	temp->data=value;
	temp->next=NULL;
	if(first==NULL)
	{
		first=temp;
		last=temp;
		temp=NULL;
	}
	else
	{
		last->next=temp;
		last=temp;
	}
	}
	void delete1()
	{
		node *temp=new node;
		temp=first;
		first=temp->next;
		delete temp;
	}

void display()
	{
		node *temp=new node;
		temp=first;
		if(temp==NULL)
		{
			cout<<"empty";}
			else
			{
			
		while(temp!=NULL)
		{
			cout<<temp->data<<" \t ";
			temp=temp->next;
		}}
	}
	
	
void queueoperation()
{int ope;
cout<<"==queue===="<<endl;
cout<<"1.insert"<<endl;
cout<<"2.delete"<<endl;
cout<<"3.exit"<<endl;

do{
	cout<<" enter 1-3 ";
	cin>>ope;
if(ope==1)
    {
	int value ;
     cout<<"enter value";
     cin>>value;
     createnode(value);
	display();
    }
	if(ope==2)
{ delete1();
	display();
	}	

}
while(ope!=0);	
}			
};


int main()
{
queue l;
l.queueoperation();	
}
==========================================
STACK
=====
ARRY 
#include<iostream>
using namespace std;
int top=-1,arr[6];
void display()
{
	if(top==-1)
	{
		cout<<"stack is empty";
	}
	else
	{
	for(int i=top;i>=0;i--)
	{
		cout<<arr[i]<<"\t";
	}
    }
}

void pop()
{
	cout<<"pop element"<<arr[top]<<endl;
	top--;
}
void peek()
{
	cout<<"peek value"<<arr[top];
}
void push()
{
	int value;
	cout<<"enter value";
	cin>>value;
	if(top==6-1)
	{
		cout<<"stact is full";
	}
	else
	{
		top++;
		arr[top]=value;
	}
}
void stack()
{
	int opt;
	cout<<"1.push\n";
	cout<<"2.pop\n";
	cout<<"3.peek\n";
	cout<<"0.exit\n";
	do
	{
		cout<<"ENTER OPTION";
		cin>>opt;
		if(opt==1)
		{
	        push();
	        if(top==6-1)
            display();
		}
		else if(opt==2)
		{
			pop();
			display();
		}
		else if(opt==3)
		{
			peek();
		}
	}
	while(opt!=0);
}
int main()
{
	stack();
	display();
}
===================================
NODE
====
#include<iostream>
using namespace std;
struct node
{ int data;
  node *next;
};
class linkedlist
{
	node *first,*last;
	public:
		linkedlist()
		{
		 first=NULL;
		 last=NULL;			
		}
void push(int value )
{ 

	node *temp=new node;
	temp->data=value;
	temp->next=first;
	first=temp;
}
void pop()
	{
		node *temp=new node;
		temp=first;
		first=temp->next;
		delete temp;
	}


void display()
	{
		node *temp=new node;
		temp=first;
		if(temp==NULL)
		{
			cout<<"empty";}
			else
			{
			
		while(temp!=NULL)
		{
			cout<<temp->data<<" \t ";
			temp=temp->next;
		}}
	}
	void peek()
	{
		cout<<first->data;
	}
	
	
void staticmethod()
{ int op;
cout<<"===static==="<<endl;
cout<<"1.push"<<endl;
cout<<"2.pop"<<endl;
cout<<"3.peek"<<endl;
do
{
	
cout<<"enter 1 to 3 ";
cin>>op;
if(op==1)
{	int value;
	cout<<"enter value";
	cin>>value;
	push(value);
	display();
}
if(op==2)
{
	pop();
	display();
	
}
if(op==3)
{
	peek();
}
}
while(op!=0);
	}				
};

int main()
{
	linkedlist l;
	l.staticmethod();
}


















 
